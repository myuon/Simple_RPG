-------------------------------------------------------------------------------
.ppjファイルについて
-------------------------------------------------------------------------------

.ppjファイルはRIFFというファイル構造を採用しています。
RIFFファイル構造はデータをチャンクという構造体単位で格納しています。
チャンクは4byteのチャンク識別子とデータサイズ、それに続き、任意サイズのデータ本体から成ります。
(RIFF,LISTチャンクの場合はデータサイズの後に4byteのフォームタイプが存在します)

チャンクには別のチャンクを含める事が出来るため、階層構造を持ったデータ構造を表現できます。
この時あるチャンクに含まれるチャンクの事をサブチャンクと呼びます。
サブチャンクは必ずRIFFかLISTチャンクに含まれます。
全てのチャンクはRIFFチャンクのサブチャンクとなります。

また、"RIFF、LISTチャンク以外"のチャンクの長さは偶数バイトでなくてはならず、
チャンクの長さが奇数バイトの場合、チャンクの後にサイズ合わせ用のNULLバイトが1byte挿入されています。
Windowsの場合mmio〜系のAPIを使用すればこの規則はAPIが面倒を見てくれるようです。

RIFFファイルに関する詳しい解説は下記を参照してください。
(音声ファイルであるwavフォーマットもRIFF形式を採用しているので参考になります)
http://www.google.com/search?hl=ja&lr=lang_ja&ie=UTF-8&oe=UTF-8&q=%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88+RIFF&num=50


-------------------------------------------------------------------------------
.ppjファイルに含まれるチャンクは以下の通りです。
-------------------------------------------------------------------------------

■チャンク名
ChunkID		: チャンクID
Size		: サイズ
FormType   	: RIFF、LISTチャンクの場合フォームタイプが存在します
Data	+0(1)	: 0バイト目から1バイトのデータがある
	+1(4)	: 1バイト目から4バイトのデータがある
	+5(2)	: 5バイト目から2バイトのデータがある

■RIFFチャンク
ChunkID		: RIFF
Size		: 不定
FormType	: UMF_
Data	+0(?)	: サブチャンク

■ヘッダチャンク
ChunkID		: UMFh
Size		: 20
Data	+0(4)	: マップの横幅
	+4(4)	: マップの高さ
	+8(4)	: パーツの横幅
	+12(4)	: パーツの高さ
	+16(1)	: レイヤー数
	+17(1)	: パーツのデータサイズ(8|16)
	+18(1)	: パスの格納方法
	+19(1)	: 予約
(パスの格納方法は、
 0 = パスをファイル名のみで格納, 1 = パスを.ppjファイルからの相対パスで格納)

■バージョンチャンク
ChunkID		: Ver_
Size		: 4
Data	+0(1)	: バージョン番号の整数部
	+1(1)	: バージョン番号の小数部、第１位
	+2(1)	: バージョン番号の小数部、第２位
	+3(1)	: アルファベット1文字

■エディタ環境チャンク
ChunkID    	: EEnv
Size	   	: 6
Data	+0(1)	: グリッド表示フラグ(0|1)
	+1(1)	: パーツ番号表示フラグ(0|1)
	+2(1)	: 使用しません
	+3(1)	: カーソルグリッド表示フラグ(0|1)
	+4(1)	: マーカー表示フラグ(0|1)
	+5(1)	: フォグモード(0|1)

■カラーキーチャンク
ChunkID    	: ColK
Size	   	: 6
Data	+0(1)	: カラーキー使用フラグ(0|1)
	+1(1)	: カラーキー(透過色)(32bit, 00RRGGBB)
	+5(1)	: 予約

■グリッドカラーチャンク
ChunkID    	: Grid
Size	   	: 8
Data	+0(1)	: グリッド色(32bit, 00RRGGBB)
	+4(1)	: カーソルグリッド色(32bit, 00RRGGBB)

■ズーム係数チャンク
ChunkID    	: Zoom
Size	   	: 4
Data	+0(1)	: メインウィンドウのズーム係数

■透明パーツチャンク
ChunkID		:InvC 
Size		: 4
Data	+0(1)	: 透明パーツ使用フラグ(0|1)
	+1(2)	: 透明パーツ番号
	+3(1)	: 予約

■ユーザデータチャンク
ChunkID		: Hidn
Size		: 4 + 不定
Data	+0(4)	: ユーザデータのサイズ
	+4(?)	: 任意のデータブロック

■コメントチャンク
ChunkID		: Comt
Size		: 不定
Data	+0(?)	: 任意の文字列(非NULL終端)
(コメントが設定されていない場合は出力されません)

■レイヤーブロックチャンク
ChunkID		: LIST
FormType	: LAY_
Size		: 不定
Data	+0(?)	: レイヤー名チャンク(下記参照)
	+?(?)	: パーツ画像パスチャンク(下記参照)
	+?(?)	: 可視状態フラグチャンク(下記参照)
	+?(?)	: レイヤーデータチャンク(下記参照)
(レイヤーの数だけこのチャンクが存在します)

■レイヤー名チャンク
ChunkID		: LSTR
Size		: 不定
Data	+0(?)	: 任意の文字列(非NULL終端)

■パーツ画像パスチャンク
ChunkID		: PSTR
Size		: 不定
Data	+0(?)	: 任意の文字列(非NULL終端)

■可視状態フラグチャンク
ChunkID		: LINV
Size		: 1
Data	+0(1)	: レイヤーの可視状態フラグ(0|1)

■レイヤーデータチャンク
ChunkID		: LDAT
Size		: 不定
Data	+0(?)	: レイヤーデータ
(レイヤーデータの構造はfmfファイルのデータブロックと同じ。
 つまりWORD配列)
